1°) 
Type Error: Quando há incompatibilidade de tipos.
Undefined Variable: Quando se tenta acessar uma variável que não foi definida previamente.
Compilation Error: Ocorre quando o código TypeScript não é compilado corretamente devido a erros de sintaxe ou importação.


2°)
Uma exceção é tipo um contratempo no meio do código que pode ser gerenciado, ao contrário dos erros normais. Elas são como obstáculos que o programa pode desviar e evitar um colapso total. A principal diferença é que os erros não podem ser tratados e estes levam ao colapso.


3°)
O TypeScript utiliza blocos try-catch para o tratamento de exceções.


4°) 
O bloco try-catch em TypeScript envolve o código propenso a erros no bloco try, permitindo a detecção e tratamento de exceções no bloco catch, evitando interrupções não gerenciadas na execução do programa.


5°) 
Para criar exceções personalizadas em TypeScript, você pode estender a classe Error ou criar uma nova classe que implementa a interface Error. Isso permite lançar e capturar exceções específicas no código.


6°) 
Exceções comuns em TypeScript:
TypeError (quando há uma incompatibilidade de tipos), erros de lógica e Undefined Variable (quando uma variável não é declarada).


7°) 
O bloco finally é usado para definir o código que será executado, independentemente de ocorrer ou não uma exceção.


8°) 
O tratamento de exceções permite a identificação e correção de problemas de forma controlada, evitando falhas e melhorando a qualidade da codificação.


9°) 
A diferença mais destacável é que o TypeScript oferece vantagens para tratar erros relacionados a tipos, devido à sua natureza tipada.


10°) 
Para testar e depurar exceções em TypeScript, é essencial usar testes unitários para casos específicos, além de ferramentas de depuração integradas em ambientes de desenvolvimento. (Não tentei depurar uma exceção ainda)